{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quick Start","text":""},{"location":"#alternative-queries","title":"Alternative Queries","text":"<p>Alternative queries is a library created to help with handcrafted SQL queries. It works by providing a class that represent the queries, with parameters type checked by <code>Pydantic</code>.</p> <p>The library is currently still in development and has an alpha release.</p>"},{"location":"#installation","title":"Installation","text":"<p>The library is available in PyPI</p> Bash<pre><code>pip install altqq\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>To use the library, you can define a class that represents a query. Then this query can be converted to plain text or <code>pyodbc</code> usable query.</p> Python<pre><code>import altqq\n\nclass SelectUserByFirstName(altqq.Query):\n    __query__ = \"\"\"\n        SELECT * FROM \"Users\"\n        WHERE first_name = {first_name}\n    \"\"\"\n    first_name: str\n\nq = altqq.to_pyodbc(SelectUserByFirstName(first_name=\"arietta\"))\nprint(q.query)\nprint(q.parameters)\n</code></pre> <p>Running the code above should give the result below:</p> Bash<pre><code>        SELECT * FROM \"Users\"\n        WHERE first_name = ?\n\n['arietta']\n</code></pre>"},{"location":"#templating-non-parameters","title":"Templating Non-Parameters","text":"<p>By default, the class properties are treated as parameters. If there's a need for more customization, they can be declared as <code>altqq.NonParameter</code>.</p> Python<pre><code>import altqq\n\nclass SelectByFirstName(altqq.Query):\n    __query__ = \"\"\"\n        SELECT * FROM \"{table}\"\n        WHERE first_name = {first_name}\n    \"\"\"\n    first_name: str\n    table: altqq.NonParameter[str]\n\nq = altqq.to_pyodbc(SelectByFirstName(\n    first_name=\"arietta\",\n    table=\"Users\"\n))\nprint(q.query)\nprint(q.parameters)\n</code></pre> <p>Running the code above should give the result below:</p> Bash<pre><code>        SELECT * FROM \"Users\"\n        WHERE first_name = ?\n\n['arietta']\n</code></pre>"},{"location":"#nested-queries","title":"Nested Queries","text":"<p>Queries can also use other queries. When passed to the functions for conversion, other queries will also be converted.</p> Python<pre><code>import altqq\n\nclass SelectUserByFirstName(altqq.Query):\n    __query__ = \"\"\"\n        SELECT * FROM \"Users\"\n        WHERE first_name = {first_name}\n    \"\"\"\n    first_name: str\n\n\nclass SelectSubqueryByAge(altqq.Query):\n    __query__ = \"\"\"\n        SELECT * FROM ({subquery}) AS tbl\n        WHERE tbl.age = {age}\n    \"\"\"\n    age: int\n    subquery: altqq.Query\n\nq = altqq.to_pyodbc(SelectSubqueryByAge(\n    age=20,\n    subquery=SelectUserByFirstName(\n        first_name=\"arietta\"\n    )\n))\nprint(q.query)\nprint(q.parameters)\n</code></pre> <p>Running the code above should give the result below:</p> Bash<pre><code>        SELECT * FROM (\n        SELECT * FROM \"Users\"\n        WHERE first_name = ?\n    ) AS tbl\n        WHERE tbl.age = ?\n\n['arietta', 20]\n</code></pre>"},{"location":"#road-map","title":"Road Map","text":"<p>Below is the list of things planned for the library</p> <ul> <li>Documentation Page</li> <li>Tests</li> <li>Expansion of Supported Version</li> <li>Support for other Python Database Tooling</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#modeling","title":"Modeling","text":"<p>These are used for defining queries.</p>"},{"location":"api/#altqq.Query","title":"<code>altqq.Query</code>","text":"<p>Base class for query definitions.</p> <p>This class can be inherited instead of providing the <code>QueryMeta</code> as the class metaclass.</p> Source code in <code>src/altqq/structs.py</code> Python<pre><code>class Query(metaclass=QueryMeta):\n    \"\"\"Base class for query definitions.\n\n    This class can be inherited instead of providing the `QueryMeta` as the\n    class metaclass.\n    \"\"\"\n\n    __query__: ClassVar[str]\n</code></pre>"},{"location":"api/#pyodbc","title":"PyODBC","text":"<p>These are used for working with PyODBC.</p>"},{"location":"api/#altqq.to_pyodbc","title":"<code>altqq.to_pyodbc(query)</code>","text":"<p>Converts a <code>Query</code> to its corresponding <code>PyODBCQuery</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Query</code> <p>Query to translate to PyODBC</p> required <p>Returns:</p> Name Type Description <code>PyODBCQuery</code> <code>PyODBCQuery</code> <p>Equivalent query for PyODBC usage.</p> Source code in <code>src/altqq/__init__.py</code> Python<pre><code>def to_pyodbc(query: Query) -&gt; PyODBCQuery:\n    \"\"\"Converts a `Query` to its corresponding `PyODBCQuery` object.\n\n    Args:\n        query (Query): Query to translate to PyODBC\n\n    Returns:\n        PyODBCQuery: Equivalent query for PyODBC usage.\n    \"\"\"\n    return Translators.PYODBC(query)\n</code></pre>"},{"location":"api/#altqq.PyODBCQuery","title":"<code>altqq.PyODBCQuery</code>  <code>dataclass</code>","text":"<p>Converted <code>Query</code> object for PyODBC usage.</p> Source code in <code>src/altqq/translators/pyodbc.py</code> Python<pre><code>@dc.dataclass\nclass PyODBCQuery:\n    \"\"\"Converted `Query` object for PyODBC usage.\"\"\"\n\n    query: str\n    parameters: Iterable[Any]\n</code></pre>"},{"location":"api/#plain-text","title":"Plain Text","text":"<p>These are used for working with plain text SQL.</p>"},{"location":"api/#altqq.to_plain_text","title":"<code>altqq.to_plain_text(query)</code>","text":"<p>Converts a <code>Query</code> to a plain text SQL.</p> <p>The conversion to plain text also handles some of the data types. None is converted to <code>NULL</code>, numeric values are written as they are and string values and other object types are escaped using <code>'</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Query</code> <p>Query to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Query as plain text.</p> Source code in <code>src/altqq/__init__.py</code> Python<pre><code>def to_plain_text(query: Query) -&gt; str:\n    \"\"\"Converts a `Query` to a plain text SQL.\n\n    The conversion to plain text also handles some of the data types. None\n    is converted to `NULL`, numeric values are written as they are and\n    string values and other object types are escaped using `'`.\n\n    Args:\n        query (Query): Query to convert.\n\n    Returns:\n        str: Query as plain text.\n    \"\"\"\n    return Translators.PLAIN_TEXT(query)\n</code></pre>"}]}